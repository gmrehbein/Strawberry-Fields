// -----------------------------------------------------------
//  File: global.h
//  Author: Gregory Rehbein (Modernized to C++23)
//
//  Copyright (C) 2012 Gregory Rehbein <gmrehbein@gmail.com>
// -----------------------------------------------------------

#pragma once

#include <set>
#include <string>
#include <utility>
#include <vector>
#include <boost/pool/singleton_pool.hpp>

#include "rectangle.h"

struct Global {
  static inline std::string in_file;
  static inline std::string out_file;
  static inline std::vector<std::vector<int>> field;
  static inline std::set<std::pair<int, int>> strawberries;

  //----------------------------------
  // Number of strawberries contained
  // within the rectangle determined by
  // the 4 coordinates.
  //-----------------------------------
  static std::size_t weight_of_rectangle(
    int top_left_row,
    int top_left_column,
    int bottom_right_row,
    int bottom_right_column) noexcept;

  static inline std::size_t num_rows = 0;
  static inline std::size_t num_columns = 0;

  //--------------------------------------------------
  // All rectangles generated by the optimizer are
  // created using the Global::rectangle_pool interface.
  // All memory for the rectangles is released at the end
  // of an optimization run.
  //--------------------------------------------------
  using tag_for_pool = struct {};
  using rectangle_pool_type = boost::singleton_pool<tag_for_pool, sizeof(Rectangle)>;

  // Convenience methods to access the singleton pool
  static void* malloc()
  {
    return rectangle_pool_type::malloc();
  }

  static void purge_memory()
  {
    rectangle_pool_type::purge_memory();
  }
};
